- name: Sign in to 1P account
  ansible.builtin.shell: op signin --account {{ opconnect_account_name }}

- name: Check if connect server exists
  ansible.builtin.shell: op connect server list --format=json
  register: connect_servers_output
  changed_when: false
  
- set_fact:
    connect_servers: "{{ connect_servers_output.stdout | from_json }}"
    server_matches: "{{ (connect_servers_output.stdout | from_json) | selectattr('name', 'equalto', opconnect_server_name) | list }}"

- fail:
    msg: "Connect server already exists"
  when: server_matches | length != 0

- name: Create 1Password connect server
  shell: op connect server create {{ opconnect_server_name }} --vaults {{ vault_name }} -f
  register: create_server
  when: server_matches | length == 0

- name: Extract UUID from output
  set_fact:
    server_uuid: "{{ create_server.stdout | regex_search('UUID:\\s+([A-Z0-9]+)', '\\1') | first }}"
  when: create_server is defined and create_server.stdout is defined

- name: Create op token
  shell: op connect token create {{ opconnect_token_name }} --server {{ server_uuid }} --vault {{ vault_name }}
  register: create_token

- name: Copy to the Playbook dir {{ playbook_dir }}
  copy:
    src: files/docker-compose.yaml
    dest: "{{ playbook_dir }}"

- name: Run 1Password Connect in detached mode
  shell: docker-compose down && docker-compose -f {{ playbook_dir }}/docker-compose.yaml up -d
  args:
    chdir: "{{ playbook_dir }}"

- name: Test connection to 1Password Connect server
  ansible.builtin.uri:
    url: "{{ connect_host }}/heartbeat"
    method: GET
  register: health_check

- name: Debug health check
  ansible.builtin.debug:
    var: health_check  
