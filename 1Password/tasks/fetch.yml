---
# Check if required 1Password Connect variables are defined
- name: Check 1Password required variables
  block:
    - name: Collect missing 1Password connection variables
      set_fact:
        missing_1p_vars: "{{ missing_1p_vars | default([]) + [item.name] }}"
      when: (item.var is not defined) or (item.var | length == 0)
      loop:
        - { name: "op_token", var: "{{ op_token | default('') }}" }

    - name: Fail with helpful message if 1Password variables are missing
      fail:
        msg: |
          The following 1Password Connect variables are not defined:
          {% for var in missing_1p_vars %}
          - {{ var }}
          {% endfor %}

          Please either:
          1. Define these variables manually in your inventory or vars file, or
          2. Run the playbook with the `connect` tag to set up 1Password Connect:
             ansible-playbook playbook.yml --tags connect
      when: missing_1p_vars is defined and missing_1p_vars | length > 0

    - name: Success message if all 1Password variables are defined
      debug:
        msg: "All required 1Password Connect variables are properly defined."
      when: missing_1p_vars is not defined or missing_1p_vars | length == 0

- name: Test connection to 1Password Connect server
  ansible.builtin.uri:
    url: "{{ connect_host }}/heartbeat"
    method: GET
  register: health_check

- name: Debug health check
  ansible.builtin.debug:
    var: health_check

- name: Debug health check
  debug:
    var: health_check

- name: Verify health check status
  assert:
    that:
      - health_check.status == 200
      - not health_check.failed
    success_msg: "1Password Connect server is healthy and responding"

- name: Display variables
  ansible.builtin.debug:
    msg: "provider: {{ provider_name }}, vault_name: {{ vault_name }}"

- name: Get the vault ID for Providerss
  ansible.builtin.shell: op vault list --format=json | jq -r '.[] | select(.name=="{{ vault_name}}") | .id'
  register: vault_id_result

- name: Store the vault ID in a variable
  ansible.builtin.set_fact:
    vault_uuid: "{{ vault_id_result.stdout }}"

- name: Find a field label from the Vault
  onepassword.connect.field_info:
    token: "{{ op_token }}"
    item: "{{ provider_name }}"
    field: "{{ item }}"
    vault: "{{ vault_uuid }}"
  register: op_field_results
  with_items:
    - "b64-key"
    - "b64-keysecret"

- name: Set variables from field values
  ansible.builtin.set_fact:
    b64_key: "{{ op_field_results.results | selectattr('item', 'equalto', 'b64-key') | map(attribute='field.value') | first }}"
    b64_keysecret: "{{ op_field_results.results | selectattr('item', 'equalto', 'b64-keysecret') | map(attribute='field.value') | first }}"

- name: Check and display success message
  ansible.builtin.debug:
    msg: "Item retrieved successfully"
  when: b64_key | default('') != '' and b64_keysecret | default('') != ''

- name: Display failure message
  ansible.builtin.fail:
    msg: "Item cannot be retrieved"
  when: b64_key | default('') == '' or b64_keysecret | default('') == ''
